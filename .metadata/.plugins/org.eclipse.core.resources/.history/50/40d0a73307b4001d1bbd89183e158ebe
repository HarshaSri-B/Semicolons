package com.example.demo.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.Entity.Employee;
import com.example.demo.Exception.ResourceNotFoundException;
import com.example.demo.repository.EmployeeRepository;

@CrossOrigin("*") // for letting other ports to access this 8080 port
@RestController
@RequestMapping("/api/v1/employees")
public class EmployeeController {

	@Autowired
	EmployeeRepository repo;

	@GetMapping
	public List<Employee> getEmpDetails() {
		return repo.findAll();
	}

	@GetMapping("{id}")
	public ResponseEntity<Employee> getEmployeeById(@PathVariable long id) {
		Employee employee = repo.findById(id)
				.orElseThrow(() -> new ResourceNotFoundException("Employee not exist with id:" + id));
		return ResponseEntity.ok(employee);
	}

	// build update employee REST API
	@PutMapping("{id}")
	public ResponseEntity<Employee> updateEmployee(@PathVariable long id, @RequestBody Employee employeeDetails) {
		Employee updateEmployee = repo.findById(id)
				.orElseThrow(() -> new ResourceNotFoundException("Employee not exist with id: " + id));

		updateEmployee.setUserName(employeeDetails.getUserName());
		updateEmployee.setEmailId(employeeDetails.getEmailId());
		updateEmployee.setPassword(employeeDetails.getPassword());

		repo.save(updateEmployee);

		return ResponseEntity.ok(updateEmployee);
	}

	@PostMapping
	public void saveEmp(@RequestBody Employee employee) {
		repo.save(employee);
	}

	@DeleteMapping("{id}")
	public ResponseEntity<HttpStatus> deleteEmployee(@PathVariable long id) {

		Employee employee = repo.findById(id)
				.orElseThrow(() -> new ResourceNotFoundException("Employee not exist with id: " + id));

		repo.delete(employee);

		return new ResponseEntity<>(HttpStatus.NO_CONTENT);

	}

	@PostMapping("/loginUser/{userEmail}/{password}")
	public String loginUser(@PathVariable String userEmail, @PathVariable String password) {
		Employee findUser = repo.findByEmailId(userEmail);
		if (findUser != null) {
			if (findUser.getPassword() == password) {
				return "login sucess";
			} else {
				return "invalid password";
			}

		} else {
			return "User not found";
		}

	}
}
